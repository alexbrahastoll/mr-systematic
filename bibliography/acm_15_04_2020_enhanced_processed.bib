@inproceedings{8811961,
  author = {{Atlidakis}, V. and {Godefroid}, P. and {Polishchuk}, M.},
  booktitle = {2019 IEEE/ACM 41st International Conference on Software Engineering (ICSE)},
  title = {RESTler: Stateful REST API Fuzzing},
  year = {2019},
  volume = {},
  number = {},
  pages = {748-758},
  abstract = {This paper introduces RESTler, the first stateful REST API fuzzer. RESTler analyzes the API specification of a cloud service and generates sequences of requests that automatically test the service through its API. RESTler generates test sequences by (1) inferring producer-consumer dependencies among request types declared in the specification (e.g., inferring that "a request B should be executed after request A" because B takes as an input a resource-id x produced by A) and by (2) analyzing dynamic feedback from responses observed during prior test executions in order to generate new tests (e.g., learning that "a request C after a request sequence A;B is refused by the service" and therefore avoiding this combination in the future). We present experimental results showing that these two techniques are necessary to thoroughly exercise a service under test while pruning the large search space of possible request sequences. We used RESTler to test GitLab, an open-source Git service, as well as several Microsoft Azure and Office365 cloud services. RESTler found 28 bugs in GitLab and several bugs in each of the Azure and Office365 cloud services tested so far. These bugs have been confirmed and fixed by the service owners.},
  keywords = {application program interfaces;cloud computing;fuzzy set theory;program debugging;program testing;prior test executions;request C;test GitLab;open-source Git service;Office365 cloud services;service owners;stateful REST API fuzzing;stateful REST API fuzzer;RESTler analyzes;API specification;cloud service;test sequences;request types;request B;request sequences;Microsoft Azure cloud services;bugs;Computer bugs;Tools;Fuzzing;Dictionaries;Open source software;Test pattern generators;REST API;Fuzzing;cloud services;fuzzer;testing;bug finding},
  doi = {10.1109/ICSE.2019.00083},
  issn = {1558-1225},
  month = may,
  mrs_inclusion_criteria = {all},
  month_numeric = {5}
}
@inproceedings{10.1145/3184558.3191654,
  author = {Dimanidis, Anastasios and Chatzidimitriou, Kyriakos C. and Symeonidis, Andreas L.},
  title = {A Natural Language Driven Approach for Automated Web API Development: Gherkin2OAS},
  year = {2018},
  isbn = {9781450356404},
  publisher = {International World Wide Web Conferences Steering Committee},
  address = {Republic and Canton of Geneva, CHE},
  url = {https://doi.org/10.1145/3184558.3191654},
  doi = {10.1145/3184558.3191654},
  booktitle = {Companion Proceedings of the The Web Conference 2018},
  pages = {1869–1874},
  numpages = {6},
  keywords = {gherkin, open API specification, restful API, behavior driven development},
  location = {Lyon, France},
  series = {WWW ’18},
  mrs_inclusion_criteria={full_version, recent, rest_api, api_spec, cs_journal},
  mrs_exclusion_criteria={irrelevant_purpose},
}
@conference{Cosulschi2015,
  author = {Cosulschi, M. and Giurca, A. and Gabroveanu, M.},
  title = {RuleStore: Towards a standard API for rule bases},
  journal = {ACM International Conference Proceeding Series},
  year = {2015},
  volume = {02-04-September-2015},
  doi = {10.1145/2801081.2801118},
  art_number = {a15},
  url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84958685415&doi=10.1145%2f2801081.2801118&partnerID=40&md5=7f790db7064ff7a4ee04c94315957fa5},
  affiliation = {Dept. of Computer Science, University of Craiova, A. I. Cuza Street 13, Craiova, 200585, Romania; Dept. of Marketing and Innovation, Brandenburg University of Technology Cottbus-Senftenberg, Erich-Weinert str.1, Cottbus, 03044, Germany},
  abstract = {Any rule-based system uses a knowledge base consists of a set of rules. Identifying a standard for storing and handling of rules and rulesets became a challenge. RuleML family of languages provides the interoperability framework for rules but does not specify any standard solution for rule storage and retrieval. In this paper we propose an model for a persistent storage for rules and an API specification for rules management. Our contribution aims to be aligned with the OMG specification towards a standard submission. © 2015 ACM.},
  publisher = {Association for Computing Machinery},
  isbn = {9781450333351},
  language = {English},
  document_type = {Conference Paper},
  source = {Scopus},
  mrs_inclusion_criteria = {full_version, recent, cs_journal},
  mrs_exclusion_criteria = {irrelevant_purpose, not_rest_api, not_api_spec}
}
@inproceedings{10.1145/3184558.3191656,
  author = {Vu, Henry and Fertig, Tobias and Braun, Peter},
  title = {Verification of Hypermedia Characteristic of RESTful Finite-State Machines},
  year = {2018},
  isbn = {9781450356404},
  publisher = {International World Wide Web Conferences Steering Committee},
  address = {Republic and Canton of Geneva, CHE},
  url = {https://doi.org/10.1145/3184558.3191656},
  doi = {10.1145/3184558.3191656},
  booktitle = {Companion Proceedings of the The Web Conference 2018},
  pages = {1881–1886},
  numpages = {6},
  keywords = {REST, hypermedia, RESTful applications, MDSD, hypermedia testing, MDT, RESTful systems},
  location = {Lyon, France},
  series = {WWW ’18},
  mrs_inclusion_criteria = {all},
}
@conference{Selonen201054,
  author = {Selonen, P. and Belimpasakis, P. and You, Y.},
  title = {Developing a ReSTful mixed reality web service platform},
  journal = {ACM International Conference Proceeding Series},
  year = {2010},
  pages = {54-61},
  doi = {10.1145/1798354.1798387},
  url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-77954605778&doi=10.1145%2f1798354.1798387&partnerID=40&md5=21325f56cd5a9f429e152df89386d518},
  affiliation = {Nokia Research Center, P.O. Box 1000, FI-33721 Tampere, Finland},
  abstract = {This paper discusses the development of a ReSTful Web Service platform for serving Mixed Reality content at Nokia Research Center. The paper gives an overview of the Mixed Reality domain, the requirements for the platform and its implementation. We further outline a method for developing resource oriented web services, beginning with high-level requirements, formalizing them as UML models and refining them to a ReSTful API specification. The approach is demonstrated with detailed examples of designing one particular API subset for Mixed Reality annotations. © 2010 ACM.},
  isbn = {9781605589596},
  language = {English},
  document_type = {Conference Paper},
  source = {Scopus},
  mrs_inclusion_criteria = {full_version, recent, rest_api, api_spec, cs_journal},
  mrs_exclusion_criteria = {irrelevant_purpose}
}
@conference{Sanchez2018537,
  author = {Sanchez, B.A. and Barmpis, K. and Neubauer, P. and Paige, R.F. and Kolovos, D.S.},
  title = {Restmule: Enabling resilient clients for remote APIs},
  journal = {Proceedings - International Conference on Software Engineering},
  year = {2018},
  pages = {537-541},
  doi = {10.1145/3196398.3196405},
  url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85051676109&doi=10.1145%2f3196398.3196405&partnerID=40&md5=4670f577356f7ac7c598c20d800ef0d1},
  affiliation = {Department of Computer Science, University of York, York, United Kingdom},
  abstract = {Mining data from remote repositories, such as GitHub and StackExchange, involves the execution of requests that can easily reach the limitations imposed by the respective APIs to shield their services from overload and abuse. Therefore, data mining clients are left alone to deal with such protective service policies which usually involves an extensive amount of manual implementation effort. In this work we present RestMule, a framework for handling various service policies, such as limited number of requests within a period of time and multi-page responses, by generating resilient clients that are able to handle request rate limits, network failures, response caching, and paging in a graceful and transparent manner. As a result, RestMule clients generated from OpenAPI specifications (i.e. standardized REST API descriptors), are suitable for intensive data-fetching scenarios. We evaluate our framework by reproducing an existing repository mining use case and comparing the results produced by employing a popular hand-written client and a RestMule client. © 2018 ACM.},
  publisher = {IEEE Computer Society},
  issn = {02705257},
  isbn = {9781450357166},
  coden = {PCSED},
  language = {English},
  document_type = {Conference Paper},
  source = {Scopus},
  mrs_inclusion_criteria = {full_version, recent, rest_api, api_spec, cs_journal},
  mrs_exclusion_criteria = {irrelevant_purpose}
}
@inproceedings{10.1145/3341105.3373875,
  author = {Grambow, Martin and Meusel, Lukas and Wittern, Erik and Bermbach, David},
  title = {Benchmarking Microservice Performance: A Pattern-Based Approach},
  year = {2020},
  isbn = {9781450368667},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/3341105.3373875},
  doi = {10.1145/3341105.3373875},
  booktitle = {Proceedings of the 35th Annual ACM Symposium on Applied Computing},
  pages = {232–241},
  numpages = {10},
  location = {Brno, Czech Republic},
  series = {SAC ’20},
  mrs_inclusion_criteria = {full_version, recent, rest_api, api_spec, cs_journal},
  mrs_exclusion_criteria = {irrelevant_purpose}
}
@inproceedings{10.1145/3154273.3154316,
  author = {Talasila, Prasad and Kakrambe, Mihir and Rai, Anurag and Santy, Sebastin and Goveas, Neena and Deshpande, Bharat M.},
  title = {BITS Darshini: A Modular, Concurrent Protocol Analyzer Workbench},
  year = {2018},
  isbn = {9781450363723},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/3154273.3154316},
  doi = {10.1145/3154273.3154316},
  booktitle = {Proceedings of the 19th International Conference on Distributed Computing and Networking},
  articleno = {Article 54},
  numpages = {10},
  keywords = {Network measurements, protocol parse graph, measurement workbench, concurrent packet analysis, packet analyzer, graph embedding, collaborative analysis},
  location = {Varanasi, India},
  series = {ICDCN ’18},
  mrs_inclusion_criteria = {full_version, recent, rest_api, api_spec, cs_journal},
  mrs_exclusion_criteria = {irrelevant_purpose}
}
@conference{Teófilo2013,
  author = {Teófilo, M. and Cavalcanti, L.C. and Siqueira, V. and Ricci, M.},
  title = {HERE Transit for Series 40: A location based application for public transport on feature phones},
  journal = {SIGGRAPH Asia 2013 Symposium on Mobile Graphics and Interactive Applications, SA 2013},
  year = {2013},
  doi = {10.1145/2543651.2543685},
  url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84897370121&doi=10.1145%2f2543651.2543685&partnerID=40&md5=f19ce6fd151aef92b448e356c54fb30e},
  affiliation = {Nokia Institute of Technology, Brazil},
  abstract = {Familiar to high-end smartphones users around the world, location based applications are scarce or even unseen on major low-end feature phones. There are many reasons for that, such as, lack of developers interest on those platforms, absence of location-aware hardware, low rate of mobile data plans adoption by its users, difficulties to develop for low-end devices and poor hardware specifications to handle a fast and informative application with complex data. Even though some of those problems could not be addressed by an application developer, HERE Transit aims to tackle the user interface, performance and data usage issues to deliver a full, smartphone-level public transport application to Nokia Series 40 (and potentially other J2ME-based platforms) 1.5 billion devices around the world. The application has three major use cases: Journey planner, nearby stations search and off-line journeys. "Journey planner" takes the user from an origin point (user's current position or informed by the user) to a chosen destination, in any given time in the past or future (provided there is data for that). The application queries the HERE Transit back-end REST API for information on routes and display them to the user (Fig. 1a). From there, the user could take a number of actions such as look for details (Fig. 1b), see section maps (Fig. 1c) or save a route for later (off-line) usage. © 2013 ACM.},
  publisher = {Association for Computing Machinery},
  isbn = {9781450326339},
  language = {English},
  document_type = {Conference Paper},
  source = {Scopus},
  mrs_inclusion_criteria = {full_version, recent, rest_api, cs_journal},
  mrs_exclusion_criteria = {irrelevant_purpose, not_api_spec}
}
@inproceedings{10.1145/2512089.2512095,
  author = {Cur\'{e}, Olivier and Maurer, Henri and Shah, Nigam and LePendu, Paea},
  title = {Refining Health Outcomes of Interest Using Formal Concept Analysis and Semantic Query Expansion},
  year = {2013},
  isbn = {9781450324199},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/2512089.2512095},
  doi = {10.1145/2512089.2512095},
  booktitle = {Proceedings of the 7th International Workshop on Data and Text Mining in Biomedical Informatics},
  pages = {5–6},
  numpages = {2},
  keywords = {formal concept analysis, semantic query expansion, health outcome of interest, electronic health care records analysis},
  location = {San Francisco, California, USA},
  series = {DTMBIO ’13},
  mrs_inclusion_criteria = {full_version, recent, rest_api, cs_journal},
  mrs_exclusion_criteria = {irrelevant_purpose, not_api_spec}
}
